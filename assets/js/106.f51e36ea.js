(window.webpackJsonp=window.webpackJsonp||[]).push([[106],{528:function(e,t,r){"use strict";r.r(t);var c=r(15),a=Object(c.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h3",{attrs:{id:"如何解释-react-的渲染流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何解释-react-的渲染流程"}},[e._v("#")]),e._v(" 如何解释 React 的渲染流程？")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/21haoxingxiu/picture/master/blog/20210309213951.png",alt:""}})]),e._v(" "),r("h3",{attrs:{id:"入门"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#入门"}},[e._v("#")]),e._v(" 入门")]),e._v(" "),r("p",[e._v("在逐级梳理之前，我们先讲一个在渲染流程中绝对绕不开的概念——协调。")]),e._v(" "),r("h3",{attrs:{id:"协调"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#协调"}},[e._v("#")]),e._v(" 协调")]),e._v(" "),r("p",[e._v("协调，在 React 官方博客的原文中是 Reconciler，它的本意是“和解者，调解员”。当你搜索与 Reconciler 相关的图片时，会出现很多握手、签字、相互拥抱的图片。")]),e._v(" "),r("p",[e._v("而在 React 源码中还有一个叫作 reconcilers 的模块，它通过抽离公共函数与 diff 算法使声明式渲染、自定义组件、state、生命周期方法和 refs 等特性实现跨平台工作。")]),e._v(" "),r("p",[e._v("Reconciler 模块以 React 16 为分界线分为两个版本。")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("Stack Reconciler是 React 15 及以前版本的渲染方案，其核心是以递归的方式逐级调度栈中子节点到父节点的渲染。")])]),e._v(" "),r("li",[r("p",[e._v("Fiber Reconciler是 React 16 及以后版本的渲染方案，它的核心设计是增量渲染（incremental rendering），也就是将渲染工作分割为多个区块，并将其分散到多个帧中去执行。它的设计初衷是提高 React 在动画、画布及手势等场景下的性能表现。")])])]),e._v(" "),r("h3",{attrs:{id:"结论"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#结论"}},[e._v("#")]),e._v(" 结论")]),e._v(" "),r("p",[e._v("React 的渲染过程大致一致，但协调并不相同，以 React 16 为分界线，分为 Stack Reconciler 和 Fiber Reconciler。这里的协调从狭义上来讲，特指 React 的 diff 算法，广义上来讲，有时候也指 React 的 reconciler 模块，它通常包含了 diff 算法和一些公共逻辑。")]),e._v(" "),r("p",[e._v("回到 Stack Reconciler 中，Stack Reconciler 的核心调度方式是递归。调度的基本处理单位是事务，它的事务基类是 Transaction，这里的事务是 React 团队从后端开发中加入的概念。在 React 16 以前，挂载主要通过 ReactMount 模块完成，更新通过 ReactUpdate 模块完成，模块之间相互分离，落脚执行点也是事务。")]),e._v(" "),r("p",[e._v("在 React 16 及以后，协调改为了 Fiber Reconciler。它的调度方式主要有两个特点，第一个是协作式多任务模式，在这个模式下，线程会定时放弃自己的运行权利，交还给主线程，通过requestIdleCallback 实现。第二个特点是策略优先级，调度任务通过标记 tag 的方式分优先级执行，比如动画，或者标记为 high 的任务可以优先执行。Fiber Reconciler的基本单位是 Fiber，Fiber 基于过去的 React Element 提供了二次封装，提供了指向父、子、兄弟节点的引用，为 diff 工作的双链表实现提供了基础。")]),e._v(" "),r("p",[e._v("在新的架构下，整个生命周期被划分为 Render 和 Commit 两个阶段。Render 阶段的执行特点是可中断、可停止、无副作用，主要是通过构造 workInProgress 树计算出 diff。以 current 树为基础，将每个 Fiber 作为一个基本单位，自下而上逐个节点检查并构造 workInProgress 树。这个过程不再是递归，而是基于循环来完成。")]),e._v(" "),r("p",[e._v("在执行上通过 requestIdleCallback 来调度执行每组任务，每组中的每个计算任务被称为 work，每个 work 完成后确认是否有优先级更高的 work 需要插入，如果有就让位，没有就继续。优先级通常是标记为动画或者 high 的会先处理。每完成一组后，将调度权交回主线程，直到下一次 requestIdleCallback 调用，再继续构建 workInProgress 树。")]),e._v(" "),r("p",[e._v("在 commit 阶段需要处理 effect 列表，这里的 effect 列表包含了根据 diff 更新 DOM 树、回调生命周期、响应 ref 等。")]),e._v(" "),r("p",[e._v("但一定要注意，这个阶段是同步执行的，不可中断暂停，所以不要在 componentDidMount、componentDidUpdate、componentWiilUnmount 中去执行重度消耗算力的任务。")]),e._v(" "),r("p",[e._v("如果只是一般的应用场景，比如管理后台、H5 展示页等，两者性能差距并不大，但在动画、画布及手势等场景下，Stack Reconciler 的设计会占用占主线程，造成卡顿，而 fiber reconciler 的设计则能带来高性能的表现。")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/21haoxingxiu/picture/master/blog/20210309214614.png",alt:""}})])])}),[],!1,null,null,null);t.default=a.exports}}]);