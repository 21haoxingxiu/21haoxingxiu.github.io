(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{510:function(t,s,e){"use strict";e.r(s);var a=e(15),i=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("ul",[e("li",[e("h3",{attrs:{id:"按需加载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#按需加载"}},[t._v("#")]),t._v(" 按需加载")])])]),t._v(" "),e("p",[t._v("按需加载的代码实现这里就不详细展开了，因为鉴于用的框架不同，实现起来都是不一样的。当然了，虽然他们的用法可能不同，但是底层的机制都是一样的。都是当使用的时候再去下载对应文件，返回一个Promise，当Promise成功以后去执行回调。")]),t._v(" "),e("ul",[e("li",[e("h3",{attrs:{id:"scope-hoisting-代码合并"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#scope-hoisting-代码合并"}},[t._v("#")]),t._v(" Scope Hoisting(代码合并)")])])]),t._v(" "),e("p",[t._v("Scope Hoisting 会分析出模块之间的依赖关系，尽可能的把打包出来的模块合并到一个函数中去。")]),t._v(" "),e("ul",[e("li",[e("h3",{attrs:{id:"tree-shaking-删除项目中未被引用的代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tree-shaking-删除项目中未被引用的代码"}},[t._v("#")]),t._v(" Tree Shaking(删除项目中未被引用的代码)")])])]),t._v(" "),e("p",[t._v("Scope Hoisting 会分析出模块之间的依赖关系，尽可能的把打包出来的模块合并到一个函数中去。")])])}),[],!1,null,null,null);s.default=i.exports}}]);